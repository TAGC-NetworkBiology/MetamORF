FROM ubuntu:18.04

MAINTAINER SÃ©bastien A. Choteau (sebastien.choteau@inserm.fr)


# ===========================================
# INSTALL PYTHON AND PYTHON LIBRARIES
# ===========================================

## Dependencies
RUN apt-get update && apt-get install -y apt-utils

## Install Python 2
RUN apt-get update && apt-get install -y python2.7

## Install Python packages
# Dependencies
RUN apt-get update && apt-get install -y python-pip
RUN pip install --upgrade pip
RUN pip install --upgrade setuptools

# Install SQLalchemy
RUN pip install sqlalchemy

# Install mysql-python and python-mysqldb
RUN pip install mysql-connector-python
RUN apt-get update && apt-get install -y python-mysqldb

# Install Pandas
RUN pip install pandas

# Install pyensembl
RUN pip install pyensembl

# Install pybiomart
RUN pip install pybiomart

# Install pyliftover
RUN pip install pyliftover

# Install wget
RUN pip install wget

# Install statistics
RUN pip install statistics

# Install Biopython
RUN pip install biopython

# Install pathos
RUN pip install pathos


# ===========================================
# INSTALL SQLITE
# ===========================================

## Install sqlite 3
RUN apt-get update && apt-get install -y sqlite3


# ============================================
# INSTALL MUSCLE (Multiple sequence alignment)
# ============================================

## Install dependencies
RUN apt-get update && apt-get install -y wget

## Install Muscle
RUN mkdir /muscle && cd /muscle \
  # Download Muscle 3.8.31
  && wget https://www.drive5.com/muscle/downloads3.8.31/muscle3.8.31_i86linux64.tar.gz \
  # Extract the archive and remove tar.gz file
  && tar xzf muscle*.tar.gz \
  && rm muscle*.tar.gz \
  # Add muscle to the binaries
  && mv muscle* /bin/muscle \
  # Clean install
  && cd / && rm -R /muscle


# ===========================================
# INSTALL UCSC UTILS
# ===========================================

# Install dependencies
RUN apt-get update && apt-get -y install libkrb5-dev curl

# Install fetchChromSizes and bedToBigBed
RUN cd /tmp \
# Download and extract source code in /tmp
  && wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/bedToBigBed \
  && wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes \
# Make the binaries executable
  && chmod +x bedToBigBed fetchChromSizes \
# Move them in a folder accessible to non-root users
  && cp bedToBigBed /usr/local/bin/bedToBigBed \
  && cp fetchChromSizes /usr/local/bin/fetchChromSizes \
  && cd /


# ===========================================
# INSTALL R
# ===========================================

## Declare environment variables
ARG BUILD_DATE
ENV BUILD_DATE ${BUILD_DATE:-}

# R version
ARG R_VERSION
ENV R_VERSION ${R_VERSION:-3.6.0}



## Install dependencies
# NB: for packages making the difference between the user version
# and the developer version, both -devel and -dev have to be installed
RUN apt-get update \
  && apt-get -y install \
  build-essential \
# Library for the compilation of packages from source (e.g. cairo)
  pkg-config \
# Foreign function interface library (necessary for
# R packages installation)
  libffi-dev \
  libmagickwand-dev


RUN apt-get update \
  && apt-get install -y --no-install-recommends \
# Bash completion and certificates
    bash-completion \
    ca-certificates \
    file \
    fonts-texgyre \
# C compiler
    g++ \
# Fortran compiler
    gfortran \
    gsfonts \
# Data compression library
    libbz2-1.0 \
# Multiprotocol file transfer library
    libcurl3 \
# Implement regular expressions in perl
# NB: Must be built with UTF-8 support
    libpcre3 \
# XZ-format compression library
    liblzma5 \
# Package to set locale
    locales \
# Make for compiling from source code
    make \
# Unzip and zip
    unzip \
    zip \
    libssl-dev \
# Data compression library
    zlib1g



## R Dependencies
# These packages are only necessary to install R
# and may be removed after R installation. 
RUN BUILDDEPS="\
# Data compression library
    libbz2-dev \
# Multiprotocol file transfer library
    libcurl4-openssl-dev \
# Implement regular expressions in perl
# NB: Must be built with UTF-8 support
    libpcre3-dev \
# Perl
    perl \
# Readline and history libraries
    libreadline-dev \
# LaTeX for documentation and vignettes
    texinfo \
    texlive-extra-utils \
    texlive-fonts-recommended \
    texlive-fonts-extra \
    texlive-latex-recommended \
# Data compression library
    zlib1g-dev" \
  && apt-get update \
  && apt-get install -y --no-install-recommends $BUILDDEPS



## Install R
# Download and extract source code in /tmp
RUN cd /tmp \
# Download source code
  && curl -O https://cran.r-project.org/src/base/R-3/R-${R_VERSION}.tar.gz \
# Unpack source code
  && tar -xf R-${R_VERSION}.tar.gz \
  && cd R-${R_VERSION} \ 
# Set compiler flags
# Size of PDF created (default 'a4', valid values:
# 'letter', 'legal', 'executive')
  && R_PAPERSIZE=letter \
    R_BATCHSAVE="--no-save --no-restore" \
# Default HTML browser to use
    R_BROWSER=xdg-open \
    PAGER=/usr/bin/pager \
# Perl binaries
    PERL=/usr/bin/perl \
# Zip and unzip binaries
    R_UNZIPCMD=/usr/bin/unzip \
    R_ZIPCMD=/usr/bin/zip \
# Awk binaries
    AWK=/usr/bin/awk \
    R_PRINTCMD=/usr/bin/lpr \
# Define primary library directory (lib or lib64)
    LIBnn=lib \
# Configure Fortran compiler flag (allow to reduce compilation time)
    CFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
# Configure C++ compiler (allow to reduce compilation time)
    CXXFLAGS="-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -g" \
# Configure options and compile source code
# -enable-R-shlib: Build R as a shared / dynamic library
# -enable-memory-profiling: Attempt to compile support for Rprofmem() and tracemem()
# -with-readline: Use command-line editing and command completion
# -with-blas: Define BLAS library
# -disable-nls: Disable translation message
  ./configure --enable-R-shlib \
               --enable-memory-profiling \
               --with-readline \
               --disable-nls \
               --without-recommended-packages \
# Build and install from source code
  && make \
  && make install
  
  
  
# Add a default CRAN mirror
RUN echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/local/lib/R/etc/Rprofile.site



# ===========================================
# INSTALL R PACKAGES
# ===========================================

# Install R packages
RUN R -e 'install.packages( "getopt" )'
RUN R -e 'install.packages( "devtools" )'

# Install Bioconductor packages
RUN R -e 'install.packages("BiocManager")'
RUN R -e 'BiocManager::install("ensembldb")'
RUN R -e 'BiocManager::install("AnnotationHub")'

# Install devtools packages
RUN R -e 'devtools::install_github( "tidyverse/dbplyr" )'
RUN R -e 'devtools::install_github( "r-lib/vctrs" )'
RUN R -e 'devtools::install_github( "tidyverse/glue" )'
RUN R -e 'devtools::install_github( "tidyverse/tidyselect" )'
RUN R -e 'devtools::install_github( "r-lib/ellipsis" )'
RUN R -e 'devtools::install_github( "r-lib/generics" )'



# ===========================================
# CLEAN INSTALL
# ===========================================

RUN apt-get remove -y python-pip
RUN apt-get clean

# Clean R install
RUN cd / \
# Remove source code
  && rm -rf /tmp/* \
# Remove dependencies
  && apt-get remove --purge -y $BUILDDEPS \
  && apt-get autoclean -y \
  && rm -rf /var/lib/apt/lists/*

# Remove other dependencies
RUN apt-get clean \
  && apt-get remove -y --purge build-essential
